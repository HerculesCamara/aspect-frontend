/**
 * üìû Formatador de Telefone
 *
 * Formata n√∫meros de telefone automaticamente enquanto o usu√°rio digita
 */

/**
 * Formata n√∫mero de telefone brasileiro
 * Aceita: (XX) XXXXX-XXXX ou (XX) XXXX-XXXX
 *
 * @param value - String do n√∫mero de telefone
 * @returns String formatada
 */
export function formatPhoneNumber(value: string): string {
  if (!value) return ''

  // Remove tudo que n√£o √© n√∫mero
  const numbers = value.replace(/\D/g, '')

  // Limita a 11 d√≠gitos (DDD + 9 d√≠gitos)
  const limited = numbers.slice(0, 11)

  // Formata conforme o tamanho
  if (limited.length <= 2) {
    // (XX
    return limited.length > 0 ? `(${limited}` : ''
  }

  if (limited.length <= 6) {
    // (XX) XXXX
    return `(${limited.slice(0, 2)}) ${limited.slice(2)}`
  }

  if (limited.length <= 10) {
    // (XX) XXXX-XXXX (telefone fixo)
    return `(${limited.slice(0, 2)}) ${limited.slice(2, 6)}-${limited.slice(6)}`
  }

  // (XX) XXXXX-XXXX (celular com 9 d√≠gitos)
  return `(${limited.slice(0, 2)}) ${limited.slice(2, 7)}-${limited.slice(7, 11)}`
}

/**
 * Remove formata√ß√£o do n√∫mero de telefone
 * Retorna apenas os n√∫meros
 *
 * @param value - String formatada
 * @returns String apenas com n√∫meros
 */
export function unformatPhoneNumber(value: string): string {
  return value.replace(/\D/g, '')
}

/**
 * Valida se o n√∫mero de telefone est√° completo
 *
 * @param value - String do telefone (formatada ou n√£o)
 * @returns true se v√°lido (10 ou 11 d√≠gitos)
 */
export function isValidPhoneNumber(value: string): boolean {
  const numbers = unformatPhoneNumber(value)
  return numbers.length === 10 || numbers.length === 11
}

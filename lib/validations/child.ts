/**
 * üë∂ Schemas de Valida√ß√£o - Crian√ßas
 *
 * Valida√ß√µes com Zod para formul√°rios de cadastro de crian√ßas
 */

import { z } from 'zod'

/**
 * Schema para cria√ß√£o de crian√ßa
 */
export const createChildSchema = z.object({
  nome: z.string()
    .min(2, 'Nome deve ter pelo menos 2 caracteres')
    .max(100, 'Nome muito longo')
    .refine(val => val.trim().split(' ').length >= 2, {
      message: 'Por favor, digite o nome completo (nome e sobrenome)'
    }),

  dataNascimento: z.string()
    .min(1, 'Data de nascimento √© obrigat√≥ria')
    .refine(val => {
      const date = new Date(val)
      return date <= new Date()
    }, 'Data de nascimento n√£o pode ser no futuro')
    .refine(val => {
      const hoje = new Date()
      const nascimento = new Date(val)
      let idade = hoje.getFullYear() - nascimento.getFullYear()
      const mes = hoje.getMonth() - nascimento.getMonth()
      if (mes < 0 || (mes === 0 && hoje.getDate() < nascimento.getDate())) {
        idade--
      }
      return idade <= 18
    }, 'Sistema voltado para crian√ßas e adolescentes at√© 18 anos'),

  genero: z.enum(['Masculino', 'Feminino', 'Outro'], {
    errorMap: () => ({ message: 'G√™nero √© obrigat√≥rio' })
  }),

  primaryParentId: z.string()
    .min(1, 'Respons√°vel √© obrigat√≥rio')
    .uuid('ID do respons√°vel inv√°lido')
    .optional()
    .or(z.string().min(1)),

  informacoesMedicas: z.object({
    diagnostico: z.string()
      .max(200, 'Diagn√≥stico muito longo')
      .optional()
      .or(z.literal(''))
      .transform(val => val === '' ? 'TEA' : val),

    medicamentos: z.string()
      .max(500, 'Lista de medicamentos muito longa')
      .optional()
      .or(z.literal(''))
      .transform(val => val === '' ? undefined : val),

    alergias: z.string()
      .max(500, 'Lista de alergias muito longa')
      .optional()
      .or(z.literal(''))
      .transform(val => val === '' ? undefined : val),

    observacoes: z.string()
      .max(1000, 'Observa√ß√µes muito longas')
      .optional()
      .or(z.literal(''))
      .transform(val => val === '' ? undefined : val),
  }).optional()
})

/**
 * Schema para atualiza√ß√£o de crian√ßa (campos opcionais)
 */
export const updateChildSchema = createChildSchema.partial()

/**
 * Tipos TypeScript inferidos
 */
export type CreateChildInput = z.infer<typeof createChildSchema>
export type UpdateChildInput = z.infer<typeof updateChildSchema>

/**
 * Helper para validar email de respons√°vel
 */
export const parentEmailSchema = z.string()
  .email('Email inv√°lido')
  .max(100, 'Email muito longo')

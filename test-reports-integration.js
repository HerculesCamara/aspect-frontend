// Testar integra√ß√£o completa do m√≥dulo Reports
async function testReportsIntegration() {
  console.log('üß™ Testando integra√ß√£o Reports...');

  // Reutilizar dados de teste anteriores
  const psychologistData = {
    username: 'psicologo_reports',
    email: 'psicologo.reports@test.com',
    password: '123456',
    firstName: 'Dr.',
    lastName: 'ReportsTest',
    role: 'Psychologist',
    licenseNumber: 'CRP-REPORTS',
    specialization: 'TEA',
    clinicName: 'Cl√≠nica Reports Test'
  };

  const parentData = {
    username: 'pai_reports',
    email: 'pai.reports@test.com',
    password: '123456',
    firstName: 'Jos√©',
    lastName: 'Santos',
    role: 'Parent',
    contactNumber: '11999777666',
    childRelationship: 'Father'
  };

  try {
    // 1. Registrar psic√≥logo
    console.log('üë®‚Äç‚öïÔ∏è Registrando psic√≥logo...');
    const psychRegistResponse = await fetch('http://localhost:5175/api/Auth/register', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(psychologistData)
    });

    if (!psychRegistResponse.ok) {
      throw new Error(`Erro no registro do psic√≥logo: ${psychRegistResponse.status}`);
    }

    const psychAuthData = await psychRegistResponse.json();
    console.log('‚úÖ Psic√≥logo registrado:', psychAuthData.email);

    // 2. Registrar parent
    console.log('üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Registrando parent...');
    const parentRegistResponse = await fetch('http://localhost:5175/api/Auth/register', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(parentData)
    });

    if (!parentRegistResponse.ok) {
      throw new Error(`Erro no registro do parent: ${parentRegistResponse.status}`);
    }

    const parentAuthData = await parentRegistResponse.json();
    console.log('‚úÖ Parent registrado:', parentAuthData.email);

    // 3. Criar crian√ßa
    console.log('üë∂ Criando crian√ßa...');
    const childData = {
      firstName: 'Maria',
      lastName: 'Santos',
      dateOfBirth: '2019-05-20T00:00:00Z',
      gender: 'Feminino',
      diagnosis: 'TEA N√≠vel 2',
      primaryParentId: parentAuthData.userId,
      medicalHistory: 'Crian√ßa para teste de relat√≥rios'
    };

    const createChildResponse = await fetch('http://localhost:5175/api/Children', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${psychAuthData.token}`
      },
      body: JSON.stringify(childData)
    });

    if (!createChildResponse.ok) {
      throw new Error(`Erro na cria√ß√£o da crian√ßa: ${createChildResponse.status}`);
    }

    const createdChild = await createChildResponse.json();
    console.log('‚úÖ Crian√ßa criada:', createdChild.firstName, createdChild.lastName);

    // 4. TESTAR REPORTS - Criar relat√≥rio
    console.log('üìä Testando cria√ß√£o de relat√≥rio...');
    const reportData = {
      childId: createdChild.childId,
      startPeriod: '2025-09-01T00:00:00Z',
      endPeriod: '2025-09-30T23:59:59Z',
      reportType: 'Mensal',
      summaryForParent: 'Maria apresentou progresso significativo na comunica√ß√£o alternativa, usando PECS com mais independ√™ncia.',
      clinicalNotes: 'Observou-se melhora na toler√¢ncia a est√≠mulos sensoriais. Comportamentos repetitivos diminu√≠ram 30%. Recomenda-se intensificar trabalho em intera√ß√£o social.',
      isSharedWithParent: false
    };

    const createReportResponse = await fetch('http://localhost:5175/api/Reports', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${psychAuthData.token}`
      },
      body: JSON.stringify(reportData)
    });

    console.log('üìä Status cria√ß√£o de relat√≥rio:', createReportResponse.status);

    if (createReportResponse.ok) {
      const createdReport = await createReportResponse.json();
      console.log('‚úÖ SUCCESS! Relat√≥rio criado:', JSON.stringify(createdReport, null, 2));

      // 5. Testar GET de relat√≥rios por crian√ßa
      console.log('üîç Testando busca de relat√≥rios por crian√ßa...');
      const getReportsResponse = await fetch(`http://localhost:5175/api/Reports/child/${createdChild.childId}`, {
        headers: {
          'Authorization': `Bearer ${psychAuthData.token}`
        }
      });

      if (getReportsResponse.ok) {
        const reports = await getReportsResponse.json();
        console.log('‚úÖ SUCCESS! Relat√≥rios encontrados:', reports.length);
        console.log('Primeiro relat√≥rio:', JSON.stringify(reports[0], null, 2));

        // 6. Testar compartilhamento com pais
        console.log('üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Testando compartilhamento com pais...');
        const shareResponse = await fetch(`http://localhost:5175/api/Reports/${createdReport.reportId}/share`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${psychAuthData.token}`
          },
          body: JSON.stringify(true)
        });

        if (shareResponse.ok) {
          const shareResult = await shareResponse.json();
          console.log('‚úÖ SUCCESS! Relat√≥rio compartilhado:', shareResult.message);

          // 7. Testar acesso dos pais
          console.log('üëÄ Testando acesso dos pais aos relat√≥rios...');
          const parentReportsResponse = await fetch(`http://localhost:5175/api/Reports/child/${createdChild.childId}`, {
            headers: {
              'Authorization': `Bearer ${parentAuthData.token}`
            }
          });

          if (parentReportsResponse.ok) {
            const parentReports = await parentReportsResponse.json();
            console.log('‚úÖ SUCCESS! Pais podem ver relat√≥rios:', parentReports.length);
            if (parentReports.length > 0) {
              console.log('Relat√≥rio visto pelos pais:', {
                tipo: parentReports[0].reportType,
                periodo: `${parentReports[0].startPeriod} at√© ${parentReports[0].endPeriod}`,
                compartilhado: parentReports[0].isSharedWithParent,
                resumo: parentReports[0].summaryForParent,
                estatisticas: parentReports[0].statistics
              });
            }

            // 8. Testar download de PDF
            console.log('üìÑ Testando download de PDF...');
            const pdfResponse = await fetch(`http://localhost:5175/api/Reports/${createdReport.reportId}/pdf`, {
              headers: {
                'Authorization': `Bearer ${psychAuthData.token}`
              }
            });

            if (pdfResponse.ok) {
              const blob = await pdfResponse.blob();
              console.log('‚úÖ SUCCESS! PDF gerado:', {
                tamanho: `${(blob.size / 1024).toFixed(2)} KB`,
                tipo: blob.type
              });

              console.log('üéâ TODOS OS TESTES DE REPORTS PASSARAM!');
              console.log('üìã Resumo dos testes realizados:');
              console.log('  ‚úÖ Criar relat√≥rio');
              console.log('  ‚úÖ Buscar relat√≥rios por crian√ßa');
              console.log('  ‚úÖ Compartilhar com pais');
              console.log('  ‚úÖ Acesso dos pais aos relat√≥rios');
              console.log('  ‚úÖ Download de PDF');

            } else {
              const errorText = await pdfResponse.text();
              console.log('‚ùå Erro no download de PDF:', errorText);
            }

          } else {
            const errorText = await parentReportsResponse.text();
            console.log('‚ùå Erro no acesso dos pais:', errorText);
          }

        } else {
          const errorText = await shareResponse.text();
          console.log('‚ùå Erro no compartilhamento:', errorText);
        }

      } else {
        const errorText = await getReportsResponse.text();
        console.log('‚ùå Erro na busca de relat√≥rios:', errorText);
      }

    } else {
      const errorText = await createReportResponse.text();
      console.log('‚ùå Erro na cria√ß√£o de relat√≥rio:', errorText);
    }

  } catch (error) {
    console.error('‚ùå Erro geral no teste:', error.message);
  }
}

testReportsIntegration().catch(console.error);